name: Manual Deployment with Version Bump

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
          - staging
          - production
        default: staging
      version_bump:
        description: 'Version bump type'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
        default: patch
      reason:
        description: 'Reason for deployment (audit trail)'
        required: true
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for tags
          
      - name: Get current version
        id: current_version
        run: |
          # Get latest tag, default to v0.0.0 if no tags exist
          CURRENT=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Current version: $CURRENT"
          echo "version=$CURRENT" >> $GITHUB_OUTPUT
          
      - name: Bump version
        id: bump_version
        run: |
          chmod +x scripts/bump-version.sh
          NEW_VERSION=$(./scripts/bump-version.sh "${{ steps.current_version.outputs.version }}" "${{ inputs.version_bump }}")
          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
      - name: Create git tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "${{ steps.bump_version.outputs.new_version }}" -m "Manual deployment: ${{ inputs.reason }}"
          git push origin "${{ steps.bump_version.outputs.new_version }}"
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
          
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/petrosa2/data-manager:${{ steps.bump_version.outputs.new_version }}
            ghcr.io/petrosa2/data-manager:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Update deployment manifest with new version
        run: |
          VERSION="${{ steps.bump_version.outputs.new_version }}"
          ENV="${{ inputs.environment }}"
          
          echo "Updating manifests for data-manager in $ENV environment with version $VERSION"
          
          # Find and update deployment manifests
          find k8s/ -name "*.yaml" -type f | while read -r file; do
            echo "Checking $file"
            if grep -q "VERSION_PLACEHOLDER" "$file"; then
              sed -i "s/VERSION_PLACEHOLDER/$VERSION/g" "$file"
              echo "Updated VERSION_PLACEHOLDER in $file to $VERSION"
            fi
          done
          
          # Show what was changed
          if git diff --quiet; then
            echo "No VERSION_PLACEHOLDER found in manifests (this is OK for manual deployments)"
          else
            echo "Changes made:"
            git diff k8s/
          fi
          
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
          
      - name: Configure kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG }}" | base64 -d > ~/.kube/config
          chmod 600 ~/.kube/config
          
      - name: Deploy to Kubernetes
        run: |
          VERSION="${{ steps.bump_version.outputs.new_version }}"
          ENV="${{ inputs.environment }}"
          
          echo "Deploying data-manager version $VERSION to $ENV"
          
          # Update deployment with new image tag
          # Skip TLS verification since external IP not in certificate SAN
          kubectl set image deployment/petrosa-data-manager \
            data-manager=ghcr.io/petrosa2/data-manager:$VERSION \
            --namespace=petrosa-apps \
            --insecure-skip-tls-verify
          
      - name: Wait for rollout
        run: |
          echo "Waiting for rollout to complete..."
          kubectl rollout status deployment/petrosa-data-manager \
            --namespace=petrosa-apps \
            --timeout=5m \
            --insecure-skip-tls-verify
          
      - name: Create deployment record
        run: |
          mkdir -p deployments
          TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          cat >> deployments/history.log << EOF
          ========================================
          Deployment Record
          ========================================
          Service: data-manager
          Environment: ${{ inputs.environment }}
          Version: ${{ steps.bump_version.outputs.new_version }}
          Previous Version: ${{ steps.current_version.outputs.version }}
          Triggered by: ${{ github.actor }}
          Reason: ${{ inputs.reason }}
          Timestamp: $TIMESTAMP
          Workflow Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          ========================================
          
          EOF
          
          cat deployments/history.log
          
      - name: Create summary
        run: |
          cat >> $GITHUB_STEP_SUMMARY << EOF
          # Deployment Successful ✅
          
          ## Details
          - **Service**: \`data-manager\`
          - **Environment**: \`${{ inputs.environment }}\`
          - **Version**: \`${{ steps.current_version.outputs.version }}\` → \`${{ steps.bump_version.outputs.new_version }}\`
          - **Bump Type**: \`${{ inputs.version_bump }}\`
          - **Triggered by**: @${{ github.actor }}
          - **Reason**: ${{ inputs.reason }}
          
          ## Verification
          
          Check deployment status:
          \`\`\`bash
          kubectl get pods -n petrosa-apps -l app=data-manager
          kubectl logs -n petrosa-apps -l app=data-manager --tail=50
          \`\`\`
          
          ## Rollback (if needed)
          
          \`\`\`bash
          kubectl rollout undo deployment/petrosa-data-manager -n petrosa-apps
          \`\`\`
          EOF
          
      - name: Notify on failure
        if: failure()
        run: |
          cat >> $GITHUB_STEP_SUMMARY << EOF
          # Deployment Failed ❌
          
          ## Details
          - **Service**: \`data-manager\`
          - **Environment**: \`${{ inputs.environment }}\`
          - **Version**: \`${{ steps.bump_version.outputs.new_version }}\`
          - **Triggered by**: @${{ github.actor }}
          
          Please check the workflow logs for details.
          EOF

